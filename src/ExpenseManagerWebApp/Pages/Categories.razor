@page "/categories"
@using ExpenseManagerWebApp.Models;
@inject IExpenseCategoryRepo _categories;

<EditForm Model="@newCategory" OnValidSubmit="@AddCategory">
    <InputText id="categoryName" @bind-Value="newCategory.CategoryName" />
    <button type="submit" class="btn btn-success">Add Category</button>

    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>

<div class="row mt-3">
    @if (allCategories is null)
    {
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only"></span>
        </div>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>CategoryName</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
            </thead>
        <tbody>
            @foreach (var cat in allCategories)
            {
                <tr>
                    <td>@cat.CategoryName</td>
                    <td><a class="btn btn-info">Edit</a></td>
                    <td><a class="btn btn-danger" @onclick="() => DeleteCategory(cat)">Delete</a></td>
                </tr>
            }
            </tbody>
        </table>
    }
</div>

@code {
    private DisplayExpenseCategory newCategory = new DisplayExpenseCategory();
    private List<ExpenseCategory>? allCategories;

    protected override async Task OnInitializedAsync()
    {
        //Have to do this in order to render page properly
        await Task.Delay(1);
        try
        {
            allCategories = await _categories.GetCategories();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    private async Task AddCategory()
    {
        ExpenseCategory c = new ExpenseCategory
        {
            CategoryName = newCategory.CategoryName
        };

        await _categories.AddCategory(c);

        allCategories?.Add(c);

        newCategory = new DisplayExpenseCategory();
    }

    private async Task DeleteCategory(ExpenseCategory category)
    {
        await _categories.DeleteCategory(category);

        allCategories.Remove(category);
    }

}
